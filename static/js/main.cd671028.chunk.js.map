{"version":3,"sources":["Posts.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Posts","username","caption","imageurl","className","Avatar","alt","src","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","useState","modalStyle","posts","setPosts","open","setOpen","openSignIn","setOpenSignIn","email","setEmail","setUsername","password","setPassword","user","setUser","useEffect","unsubscribe","onAuthStateChanged","authUser","console","log","displayName","updateProfile","collection","onSnapshot","snapshot","docs","map","doc","id","post","data","Modal","onClose","style","Input","placeholder","type","value","onChange","e","target","Button","onClick","event","preventDefault","createUserWithEmailAndPassword","then","catch","error","alert","message","signInWithEmailAndPassword","signOut","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cd671028.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport './Posts.css'\nimport Avatar from '@material-ui/core/Avatar'\n\nfunction Posts({username, caption, imageurl}) {\n\n\n    return (\n        <div className=\"post\">\n            <div className=\"post__header\">\n                <Avatar\n                className=\"post__avatar\"\n                alt=\"Rahul\"></Avatar>\n                <h3>{username}</h3>\n            </div>\n  \n            <img className=\"post__image\" src={imageurl} alt=\"image\"/>\n            <h4 className=\"post__text\"><strong>{username}</strong>{caption}</h4>\n        </div>\n    )\n}\n\nexport default Posts\n","import firebase from \"firebase\"\n\nconst firebaseConfig = firebase.initializeApp({\n    apiKey: \"AIzaSyB5xJJKh8wjJPaGhNfu6xuxzt5_eOFcxZQ\",\n    authDomain: \"instagram-clone-a415b.firebaseapp.com\",\n    databaseURL: \"https://instagram-clone-a415b.firebaseio.com\",\n    projectId: \"instagram-clone-a415b\",\n    storageBucket: \"instagram-clone-a415b.appspot.com\",\n    messagingSenderId: \"741545890054\",\n    appId: \"1:741545890054:web:63e781404611fe7ccace87\",\n    measurementId: \"G-CDWQBB9QYD\"\n  });\n\nconst db = firebase.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage();\n\nexport { db, auth, storage};","import React ,{useState, useEffect} from 'react'\nimport Post from './Posts.js'\nimport './App.css'\nimport { db, auth } from './firebase'\nimport {makeStyles} from '@material-ui/core/styles'\nimport Modal from '@material-ui/core/Modal'\nimport {Button, Input} from '@material-ui/core'\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50 ;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '1px solid #fafafa',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n  const [posts, setPosts] = useState([])\n  const [open, setOpen] = useState(false);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const[email, setEmail] = useState('');\n  const[username, setUsername] = useState('');\n  const[password, setPassword] = useState('');\n  const[user,setUser] = useState();\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser)=>{\n      if(authUser){\n        console.log(authUser);\n        setUser(authUser);\n\n        if(authUser.displayName){\n\n        }else{\n          return authUser.updateProfile({\n            displayName: username,\n          })\n        }\n      }else{\n        setUser(null);\n      }\n    })\n\n    return () => {\n      unsubscribe();\n    }\n\n  }, [user, username])\n\n  useEffect(() => {\n    db.collection('posts').onSnapshot(snapshot => {\n      setPosts(snapshot.docs.map(doc => ({\n        id: doc.id,\n        post: doc.data()\n      })))\n    })\n  }, []);\n\n  const signUp = (event) => {\n    event.preventDefault();\n\n    auth.createUserWithEmailAndPassword(email, password)\n    .then((authUser) => {\n      return authUser.user.updateProfile({\n        displayName: username\n      })\n    })\n    .catch((error) => alert(error.message))\n\n    setOpen(false);\n  }\n\n  const SignIn = (event) => {\n      event.preventDefault()\n\n      auth.signInWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message))\n\n      setOpenSignIn(false) \n  }\n\n  return (\n    <div className=\"app\">\n\n      <Modal\n      open={open}\n      onClose={() => setOpen(false)}>\n        <div style={modalStyle} className={classes.paper}>\n      <form className=\"app__signup\"> \n      <center>\n          <img className=\"app_headerImage\" src=\"./Assets/instalogo.svg\"  alt=\"logo\"/>\n          </center>\n          \n          <Input\n          placeholder=\"Username\"\n          type=\"text\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}/>\n          \n          <Input\n          placeholder=\"Email\"\n          type=\"text\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}/>\n          \n          <Input\n          placeholder=\"Password\"\n          type=\"text\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}/>\n\n          <Button onClick={signUp}>Sign Up</Button>\n      </form>\n        </div>\n      </Modal>\n\n      <Modal\n      open={openSignIn}\n      onClose={() => setOpenSignIn(false)}>\n        <div style={modalStyle} className={classes.paper}>\n      <form className=\"app__signup\"> \n      <center>\n          <img className=\"app_headerImage\" src=\"./Assets/instalogo.svg\"  alt=\"logo\"/>\n          </center>\n          \n          <Input\n          placeholder=\"Email\"\n          type=\"text\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}/>\n          \n          <Input\n          placeholder=\"Password\"\n          type=\"text\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}/>\n\n          <Button onClick={SignIn}>Login</Button>\n      </form>\n        </div>\n      </Modal>\n  \n    <div className=\"app_header\">\n      <img className=\"app_headerImage\" src=\"/Assets/instalogo.svg\"  alt=\"logo\"/>\n    </div>\n    {user ? (\n            <Button onClick={()=> auth.signOut()}>\n                Logout\n            </Button>\n    ): \n    <div>            \n        <Button onClick={()=>setOpenSignIn(true)}>\n        Login\n        </Button>\n        <Button onClick={()=>setOpen(true)}>\n        Sign Up\n        </Button>\n    </div>\n        }\n    {\n      posts.map(({id, post}) =>(\n\n         <Post key={id} username={post.username} caption={\" \"+post.caption} imageurl={post.imageurl} />\n  )) \n    }\n\n    <h1>Start Instagram 🚀</h1>\n    \n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}